import { PrismaClient } from '@prisma/client';
import sharp from 'sharp';

const prisma = new PrismaClient();

// Parse image sizing configuration from environment
const getImageDimensions = (): { width?: number; height?: number; fit: 'inside' | 'outside' | 'cover' | 'fill' | 'contain' } => {
  // Option 1: Max size (default) - preserves aspect ratio within boundary
  if (process.env.IMAGE_MAX_SIZE) {
    const maxSize = parseInt(process.env.IMAGE_MAX_SIZE) || 1200;
    if (!isNaN(maxSize)) {
      return { width: maxSize, height: maxSize, fit: 'inside' };
    }
  }
  
  // Option 2: Fixed width, auto height
  if (process.env.IMAGE_WIDTH) {
    const width = parseInt(process.env.IMAGE_WIDTH) || 1200;
    if (!isNaN(width)) {
      return { width, height: undefined, fit: 'inside' };
    }
  }
  
  // Option 3: Fixed height, auto width
  if (process.env.IMAGE_HEIGHT) {
    const height = parseInt(process.env.IMAGE_HEIGHT) || 1200;
    if (!isNaN(height)) {
      return { width: undefined, height, fit: 'inside' };
    }
  }
  
  // Default fallback
  return { width: 1200, height: 1200, fit: 'inside' };
};

const imageConfig = getImageDimensions();
const imageQuality = parseInt(process.env.IMAGE_QUALITY || '70') || 70;

export interface ImageData {
  buffer: Buffer;
  mimeType: string;
  width?: number;
  height?: number;
}

export async function processAndStoreImage(
  buffer: Buffer,
  options?: {
    personId?: string;
    imageType?: string;
    sequenceNumber?: number;
    caption?: string;
    uploadedById?: string;
  }
): Promise<{ imageId: string }> {
  // Process image using environment configuration
  const processedBuffer = await sharp(buffer)
    .rotate() // Auto-rotate based on EXIF orientation
    .resize(imageConfig.width, imageConfig.height, {
      fit: imageConfig.fit,
      withoutEnlargement: true,
    })
    .jpeg({ quality: imageQuality })
    .toBuffer();

  const metadata = await sharp(processedBuffer).metadata();

  // Store image in database
  const image = await prisma.imageStorage.create({
    data: {
      data: processedBuffer,
      mimeType: 'image/jpeg',
      size: processedBuffer.length,
      width: metadata.width,
      height: metadata.height,
      personId: options?.personId,
      imageType: options?.imageType,
      sequenceNumber: options?.sequenceNumber ?? 0,
      caption: options?.caption,
      uploadedById: options?.uploadedById,
    },
  });

  return {
    imageId: image.id,
  };
}

export async function getImage(imageId: string): Promise<ImageData | null> {
  const image = await prisma.imageStorage.findUnique({
    where: { id: imageId },
  });

  if (!image) {
    return null;
  }

  return {
    buffer: Buffer.from(image.data),
    mimeType: image.mimeType,
    width: image.width ?? undefined,
    height: image.height ?? undefined,
  };
}

export async function deleteImage(imageId: string): Promise<boolean> {
  try {
    await prisma.imageStorage.delete({
      where: { id: imageId },
    });
    return true;
  } catch {
    return false;
  }
}

export async function processImageBuffer(
  buffer: Buffer
): Promise<ImageData> {
  const processedBuffer = await sharp(buffer)
    .rotate() // Auto-rotate based on EXIF orientation
    .resize(imageConfig.width, imageConfig.height, {
      fit: imageConfig.fit,
      withoutEnlargement: true,
      position: 'center',
    })
    .jpeg({ quality: imageQuality })
    .toBuffer();

  const metadata = await sharp(processedBuffer).metadata();

  return {
    buffer: processedBuffer,
    mimeType: 'image/jpeg',
    width: metadata.width,
    height: metadata.height,
  };
}