generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  email               String?              @unique
  emailVerified       DateTime?
  emailVerificationToken String?           @unique
  emailVerificationExpires DateTime?
  password            String
  firstName           String?
  lastName            String?
  isActive            Boolean              @default(true)
  optOutOfAllEmail    Boolean              @default(false)
  allowAnonymousComments Boolean           @default(true)
  lastLogin           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  uploadedImages      ImageStorage[]
  personAccess        PersonAccess[]
  supporters          Supporter[]
  townAccess          TownAccess[]
  userRoles           UserRole[]
  passwordResetTokens PasswordResetToken[]
  createdHistories    PersonHistory[]
  emailOptOuts        EmailOptOut[]
  sentEmails          EmailNotification[]  @relation("sentTo")
  comments            Comment[]
  emailOptOutTokens   EmailOptOutToken[]
  magicLinkTokens     MagicLinkToken[]

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model Town {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  state           String
  county          String?
  zipCode         String?
  fullAddress     String       @db.Text
  description     String?      @db.Text
  isActive        Boolean      @default(true)
  latitude        Float?
  longitude       Float?
  defaultThemeId  String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  persons         Person[]
  townAccess      TownAccess[]
  theme           Theme?       @relation(fields: [defaultThemeId], references: [id])

  @@index([defaultThemeId], map: "towns_defaultThemeId_fkey")
  @@map("towns")
}

model Person {
  id                   String                 @id @default(cuid())
  firstName            String
  middleName           String?
  lastName             String
  alienIdNumber        String?
  ssn                  String?
  dateOfBirth          DateTime?
  placeOfBirth         String?
  height               String?
  weight               String?
  eyeColor             String?
  hairColor            String?
  lastKnownAddress     String                 @db.Text
  currentAddress       String?                @db.Text
  phoneNumber          String?
  emailAddress         String?
  story                String?                @db.Text
  lastSeenDate         DateTime?
  lastSeenLocation     String?
  isActive             Boolean                @default(true)
  isFound              Boolean                @default(false)
  status               String                 @default("missing")
  themeId              String?
  townId               String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  bondAmount           Decimal?               @db.Decimal(10, 2)
  bondStatus           String?
  caseNumber           String?
  countryOfOrigin      String?
  courtLocation        String?
  detentionCenterId    String?
  detentionDate        DateTime?
  detentionStatus      String?                @default("detained")
  internationalAddress String?                @db.Text
  legalRepEmail        String?
  legalRepFirm         String?
  legalRepName         String?
  legalRepPhone        String?
  nextCourtDate        DateTime?
  releaseDate          DateTime?
  detentionStory       String?                @db.Text
  familyMessage        String?                @db.Text
  lastHeardFromDate    DateTime?
  notesFromLastContact String?                @db.Text
  representedByLawyer  Boolean                @default(false)
  representedByNotes   String?                @db.Text
  slug                 String                 @unique
  showDetentionInfo    Boolean                @default(true)
  showLastHeardFrom    Boolean                @default(true)
  showDetentionDate    Boolean                @default(true)
  showCommunitySupport Boolean                @default(true)
  anonymousSupport     AnonymousSupport[]
  comments             Comment[]
  familySettings       FamilyPrivacySettings?
  personAccess         PersonAccess[]
  personImages         PersonImage[]
  detentionCenter      DetentionCenter?       @relation(fields: [detentionCenterId], references: [id])
  theme                Theme?                 @relation(fields: [themeId], references: [id])
  town                 Town                   @relation(fields: [townId], references: [id], onDelete: Cascade)
  stories              Story[]
  supporters           Supporter[]
  personHistory        PersonHistory[]
  emailOptOuts         EmailOptOut[]
  emailNotifications   EmailNotification[]
  emailOptOutTokens    EmailOptOutToken[]
  magicLinkTokens      MagicLinkToken[]

  @@index([townId])
  @@index([firstName, lastName])
  @@index([slug])
  @@index([status])
  @@index([detentionCenterId])
  @@index([themeId], map: "persons_themeId_fkey")
  @@map("persons")
}

model Story {
  id        String   @id @default(cuid())
  language  String   @default("en")
  storyType String   @default("personal")
  content   String   @db.Text
  isActive  Boolean  @default(true)
  personId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, language, storyType])
  @@index([personId])
  @@index([language])
  @@map("stories")
}

model Supporter {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  email             String?
  phone             String?
  fullAddress       String?   @db.Text
  country           String?
  relationship      String?
  displayName       String?
  isPublic          Boolean   @default(true)
  supportMessage    String?   @db.Text
  shareEmail        Boolean   @default(false)
  sharePhone        Boolean   @default(false)
  shareAddress      Boolean   @default(false)
  isVerified        Boolean   @default(false)
  verificationToken String?   @unique
  verifiedAt        DateTime?
  personId          String
  userId            String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  person            Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([personId])
  @@index([email])
  @@index([userId], map: "supporters_userId_fkey")
  @@map("supporters")
}

model Comment {
  id                       String    @id @default(cuid())
  content                  String    @db.Text
  isActive                 Boolean   @default(true)
  isApproved               Boolean   @default(false)
  moderatorNotes           String?   @db.Text
  personId                 String
  personHistoryId          String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  familyVisibilityOverride String?
  type                     String    @default("support")
  visibility               String    @default("public")
  approvedAt               DateTime?
  approvedBy               String?
  birthdate                DateTime?
  displayNameOnly          Boolean   @default(false)
  email                    String?
  firstName                String?
  lastName                 String?
  occupation               String?
  phone                    String?
  privacyRequiredDoNotShowPublicly Boolean @default(false)
  requiresFamilyApproval   Boolean   @default(true)
  showBirthdate            Boolean   @default(false)
  showOccupation           Boolean   @default(false)
  wantsToHelpMore          Boolean   @default(false)
  city                     String?
  showCityState            Boolean   @default(true)
  state                    String?
  streetAddress            String?
  zipCode                  String?
  showComment              Boolean   @default(true)
  privateNoteToFamily      String?   @db.Text
  ipAddress                String?
  userAgent                String?   @db.Text
  latitude                 Float?
  longitude                Float?
  geoCity                  String?
  region                   String?
  country                  String?
  processedForLatLon       Boolean   @default(false)
  userId                   String?
  hideRequested            Boolean   @default(false)
  hideRequestedAt          DateTime?
  verificationEmailSentAt  DateTime?
  person                   Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personHistory            PersonHistory? @relation(fields: [personHistoryId], references: [id], onDelete: Cascade)
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([personId])
  @@index([personHistoryId])
  @@index([visibility])
  @@index([type])
  @@index([isApproved])
  @@index([email])
  @@index([processedForLatLon])
  @@index([userId])
  @@index([hideRequested])
  @@map("comments")
}

model AnonymousSupport {
  id                 String   @id @default(cuid())
  personId           String
  ipAddress          String?
  userAgent          String?  @db.Text
  createdAt          DateTime @default(now())
  latitude           Float?
  longitude          Float?
  geoCity            String?
  region             String?
  country            String?
  processedForLatLon Boolean  @default(false)
  person             Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([createdAt])
  @@index([processedForLatLon])
  @@map("anonymous_support")
}

model TownAccess {
  id          String   @id @default(cuid())
  userId      String
  townId      String
  accessLevel String   @default("read")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  town        Town     @relation(fields: [townId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, townId])
  @@index([townId], map: "town_access_townId_fkey")
  @@map("town_access")
}

model PersonAccess {
  id          String   @id @default(cuid())
  userId      String
  personId    String
  accessLevel String   @default("read")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  person      Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, personId])
  @@index([personId], map: "person_access_personId_fkey")
  @@map("person_access")
}


model Theme {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  colors      String   @db.Text
  cssVars     String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  persons     Person[]
  towns       Town[]

  @@map("themes")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  dataType    String   @default("string")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  oldValues  String?  @db.Text
  newValues  String?  @db.Text
  ipAddress  String?
  userAgent  String?  @db.Text
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_log")
}

model DetentionCenter {
  id                   String                @id @default(cuid())
  name                 String
  facilityType         String
  operatedBy           String?
  address              String                @db.Text
  city                 String
  state                String
  zipCode              String
  country              String                @default("USA")
  phoneNumber          String?
  faxNumber            String?
  emailAddress         String?
  website              String?
  capacity             Int?
  currentPopulation    Int?
  latitude             Float?
  longitude            Float?
  isActive             Boolean               @default(true)
  isICEFacility        Boolean               @default(true)
  notes                String?               @db.Text
  transportInfo        String?               @db.Text
  visitingHours        String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  imageId              String?
  detentionCenterImage DetentionCenterImage?
  detainees            Person[]

  @@index([state])
  @@index([city])
  @@index([name])
  @@index([imageId])
  @@map("detention_centers")
}

model HealthCheck {
  id         String   @id @default(cuid())
  testData   String
  testNumber Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("health_checks")
}

model FamilyPrivacySettings {
  id                       String   @id @default(cuid())
  personId                 String   @unique
  showDetaineeEmail        Boolean  @default(false)
  showDetaineePhone        Boolean  @default(false)
  showDetaineeAddress      Boolean  @default(false)
  showAlienId              Boolean  @default(false)
  showLegalInfo            Boolean  @default(false)
  showSupporterEmails      Boolean  @default(false)
  showSupporterPhones      Boolean  @default(false)
  showSupporterAddresses   Boolean  @default(false)
  defaultCommentVisibility String   @default("public")
  notifyFamilyEmail        String?
  notifyOnNewSupporter     Boolean  @default(true)
  notifyOnNewComment       Boolean  @default(true)
  authorizedEmails         String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  updatedBy                String?
  person                   Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("family_privacy_settings")
}

model ImageStorage {
  id                    String                 @id @default(cuid())
  data                  Bytes?
  mimeType              String                 @default("image/jpeg")
  size                  Int
  width                 Int?
  height                Int?
  caption               String?
  uploadedById          String?
  storageType           String                 @default("database")
  s3Key                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  detentionCenterImages DetentionCenterImage[]
  uploadedBy            User?                  @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  personImages          PersonImage[]

  @@index([uploadedById])
  @@index([storageType])
  @@map("image_storage")
}

model PersonImage {
  id             String       @id @default(cuid())
  personId       String
  imageId        String
  imageType      String       @default("gallery")
  sequenceNumber Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  image          ImageStorage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  person         Person       @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, imageId])
  @@index([personId])
  @@index([imageId])
  @@index([sequenceNumber])
  @@map("person_images")
}

model DetentionCenterImage {
  id                String          @id @default(cuid())
  detentionCenterId String          @unique
  imageId           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  detentionCenter   DetentionCenter @relation(fields: [detentionCenterId], references: [id], onDelete: Cascade)
  image             ImageStorage    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([imageId])
  @@map("detention_center_images")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model PersonHistory {
  id                String   @id @default(cuid())
  personId          String
  description       String   @db.Text
  date              DateTime
  visible           Boolean  @default(true)
  sendNotifications Boolean  @default(false)
  createdByUsername String
  createdByUserId   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  person            Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdBy         User     @relation(fields: [createdByUserId], references: [id], onDelete: Restrict)
  comments          Comment[]
  emailNotifications EmailNotification[]
  magicLinkTokens   MagicLinkToken[]

  @@index([personId])
  @@index([visible])
  @@index([date])
  @@map("person_history")
}

model EmailOptOut {
  id        String   @id @default(cuid())
  userId    String
  personId  String?
  source    String   @default("manual") // "manual", "link", "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  person    Person?  @relation(fields: [personId], references: [id], onDelete: Cascade)
  
  @@unique([userId, personId])
  @@index([userId])
  @@index([personId])
  @@map("email_opt_outs")
}

model EmailNotification {
  id                String                @id @default(cuid())
  userId            String?               // Made optional for non-user emails
  personId          String?
  personHistoryId   String?
  subject           String
  htmlContent       String                @db.Text
  textContent       String?               @db.Text
  status            EmailStatus           @default(QUEUED)
  provider          String?
  messageId         String?
  sentTo            String?               // Email address to send to
  sentAt            DateTime?
  deliveredAt       DateTime?
  openedAt          DateTime?
  errorMessage      String?               @db.Text
  retryCount        Int                   @default(0)
  maxRetries        Int                   @default(3)
  scheduledFor      DateTime              @default(now())
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  templateId        String?
  customizations    Json?
  trackingEnabled   Boolean               @default(false)
  webhookUrl        String?
  webhookEvents     Json?
  
  user              User?                 @relation("sentTo", fields: [userId], references: [id], onDelete: Cascade)
  person            Person?               @relation(fields: [personId], references: [id], onDelete: Cascade)
  personHistory     PersonHistory?        @relation(fields: [personHistoryId], references: [id], onDelete: Cascade)
  template          EmailTemplate?        @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  @@index([status, scheduledFor])
  @@index([userId])
  @@index([personId])
  @@index([templateId])
  @@index([messageId])
  @@index([sentTo])
  @@map("email_notifications")
}

model EmailOptOutToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  personId  String?
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  person    Person?  @relation(fields: [personId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("email_opt_out_tokens")
}

model EmailTemplate {
  id                 String              @id @default(cuid())
  name               String              @unique
  subject            String
  htmlContent        String              @db.Text
  textContent        String?             @db.Text
  variables          Json?
  isActive           Boolean             @default(true)
  trackingEnabled    Boolean             @default(false)
  webhookUrl         String?
  webhookHeaders     Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  emailNotifications EmailNotification[]
  
  @@map("email_templates")
}

model CommentVerificationToken {
  id          String    @id @default(cuid())
  email       String    @unique
  tokenHash   String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime  @default(now())
  usageCount  Int       @default(0)
  lastAction  String?
  revokedAt   DateTime?
  revokedBy   String?
  
  @@index([email])
  @@index([tokenHash])
  @@index([isActive])
  @@map("comment_verification_tokens")
}

model MagicLinkToken {
  id              String    @id @default(cuid())
  token           String    @unique
  userId          String
  personId        String
  personHistoryId String
  expiresAt       DateTime
  usedAt          DateTime?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  person          Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  personHistory   PersonHistory @relation(fields: [personHistoryId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("magic_link_tokens")
}

enum EmailStatus {
  QUEUED
  SENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
}
